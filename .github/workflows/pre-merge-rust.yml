# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Rust pre-merge checks

on:
  # Always run this workflow when commits are pushed to main.
  push:
    branches:
    - main

  # Run this workflow on pull requests targeting main but only if files in runtime/rust change.
  pull_request:
    paths:
    - .github/workflows/pre-merge-rust.yml
    - 'lib/runtime/**'
    - 'lib/llm/**'
    - 'lib/bindings/**'
    - 'launch/**'
    - 'components/**'
    - '**.rs'
    - 'Cargo.toml'
    - 'Cargo.lock'

jobs:
  pre-merge-rust:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        framework:
          - vllm
    permissions:
      contents: read
    outputs:
      image_tag: ${{ steps.define_image_tag.outputs.image_tag }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Define Image Tag
      id: define_image_tag
      run: |
        echo "image_tag=dynamo:latest-${{ matrix.framework }}" >> $GITHUB_OUTPUT
    - name: Build image
      env:
        GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      run: |
        ./container/build.sh --tag ${{ steps.define_image_tag.outputs.image_tag }} --target ci_minimum --framework ${{ matrix.framework }}

  run-rust-tests:
    needs: pre-merge-rust
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - dir: '.'
            args: '--all-features'
            framework: vllm
          - dir: 'lib/bindings/python'
            args: '--all-features'
            framework: vllm
          - dir: 'lib/runtime/examples'
            args: '--all-features'
            framework: vllm
          - dir: 'lib/llm'
            args: '--features block-manager'
            framework: vllm
    permissions:
      contents: read
    env:
      CONTAINER_ID: test_${{ github.run_id }}_${{ github.run_attempt }}_${{ github.job }}_${{ matrix.framework }}_${{ matrix.dir }}
      IMAGE_TAG: ${{ needs.pre-merge-rust.outputs.image_tag }}
    steps:
    - uses: actions/checkout@v4
    - name: Run all Rust tests in container
      working-directory: ${{ matrix.dir }}
      run: |
        # Start container and keep it running
        docker run -d --name ${{ env.CONTAINER_ID }} ${{ env.IMAGE_TAG }} tail -f /dev/null

        # Run all tests in the same container
        echo "Running Cargo Check..."
        docker exec -w /workspace/${{ matrix.dir }} ${{ env.CONTAINER_ID }} cargo check --locked ${{ matrix.args }}

        echo "Running Code Formatting Check..."
        docker exec -w /workspace/${{ matrix.dir }} ${{ env.CONTAINER_ID }} bash -c "rustup component add rustfmt && cargo fmt -- --check"

        echo "Running Clippy Checks..."
        docker exec -w /workspace/${{ matrix.dir }} ${{ env.CONTAINER_ID }} bash -c "rustup component add clippy && cargo clippy --no-deps ${{ matrix.args }} -- -D warnings"

        echo "Running cargo-deny..."
        docker exec -w /workspace/${{ matrix.dir }} ${{ env.CONTAINER_ID }} bash -c "cargo-deny --version || cargo install cargo-deny@0.16.4 && cargo-deny --no-default-features check --hide-inclusion-graph licenses bans --config /workspace/deny.toml"

        echo "Running Doc Tests..."
        docker exec -w /workspace/${{ matrix.dir }} ${{ env.CONTAINER_ID }} bash -c "cargo doc --no-deps ${{ matrix.args }} && cargo test --locked --doc ${{ matrix.args }}"

        echo "Running Unit Tests..."
        docker exec -w /workspace/${{ matrix.dir }} ${{ env.CONTAINER_ID }} cargo test --locked ${{ matrix.args }}

        # Stop and remove the container
        docker stop ${{ env.CONTAINER_ID }}
        docker rm ${{ env.CONTAINER_ID }}
